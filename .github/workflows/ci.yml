name: Continuous Testing
on: [push]
permissions:
  contents: write
jobs:
  Continuous-Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.8"
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install the project
        run: uv sync --locked --all-extras --dev
      - name: Analysing the code with pylint
        run: |
          uv run pylint $(git ls-files '*.py') --output-format=json2:somefile.json,colorized
        continue-on-error: true #
      - name: pylint score
        run: |
          PYLINT_SCORE=$(cat somefile.json | jq -r '.statistics.score')
          echo "pylint_score=$PYLINT_SCORE" >> $GITHUB_ENV
      - name: Lint with flake8
        run: |
          FLAKE8_OUTPUT_FILE="flake8_output.txt"
          uv run flake8 --config=.flake8 --count --format='%(row)d:%(col)d: %(code)s %(text)s' > "$FLAKE8_OUTPUT_FILE" || true
          FLAKE8_ISSUES=$(wc -l < "$FLAKE8_OUTPUT_FILE" | xargs)
          echo "Flake8 found $FLAKE8_ISSUES issue(s)."

          if [[ "$FLAKE8_ISSUES" -eq 0 ]];          then FLAKE8_COLOR="brightgreen";
          elif [[ "$FLAKE8_ISSUES" -lt 10 ]];       then FLAKE8_COLOR="yellowgreen";
          elif [[ "$FLAKE8_ISSUES" -lt 50 ]];       then FLAKE8_COLOR="orange";
          else                                            FLAKE8_COLOR="red";
          fi

          echo "flake8_issues=$FLAKE8_ISSUES" >> $GITHUB_ENV
          echo "flake8_color=$FLAKE8_COLOR"   >> $GITHUB_ENV
          echo "Flake8 found $FLAKE8_ISSUES issue(s)."
        continue-on-error: true
      - name: Run Bandit
        run: uv run bandit -r $(git ls-files '*.py')
        continue-on-error: true #
      - name: Test with pytest
        run: |
          uv run pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=model_training --cov-report=json
          COVERAGE=$(cat coverage.json | jq -r '.totals.percent_covered_display')
          echo "coverage=$COVERAGE" >> $GITHUB_ENV
      - name: Commit report
        run: |
          sed -E -i 's/!\[flake8\]\(https:\/\/img\.shields\.io\/badge\/flake8-[0-9]+%20issues-[a-z]+\.svg\)/![flake8](https:\/\/img.shields.io\/badge\/flake8-${{ env.flake8_issues }}%20issues-${{ env.flake8_color }}.svg)/' README.md
          sed -E -i 's/.*!\[pylint score\]\(https:\/\/img\.shields\.io\/badge\/pylint%20score-[0-9.]+-green\.svg\)$/![pylint score](https:\/\/img.shields.io\/badge\/pylint%20score-${{ env.pylint_score }}-green.svg)/' README.md
          sed -E -i 's/.*!\[test coverage\]\(https:\/\/img\.shields\.io\/badge\/test%20coverage-[0-9]+%25-green\.svg\)$/![test coverage](https:\/\/img.shields.io\/badge\/test%20coverage-${{ env.coverage }}%25-green.svg)/' README.md
          git config --global user.name 'remla25-team5'
          git config --global user.email 'remla25-team5@users.noreply.github.com'
          git add README.md
          git commit -m "README"
          git push
